generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  SUPPORT
  USER
}

enum Status {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum Category {
  GENERAL
  TECHNICAL
  BILLING
  FEATURE_REQUEST
  BUG
}

enum MessageType {
  USER_MESSAGE
  SYSTEM_UPDATE
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  password      String
  image         String?
  role          Role      @default(USER)
  walletAddress String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  tickets       Ticket[]  @relation("CreatedTickets")
  assigned      Ticket[]  @relation("AssignedTickets")
  comments      Comment[]
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  activityLogs  ActivityLog[]
}

model Ticket {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  status      Status    @default(OPEN)
  priority    Priority  @default(MEDIUM)
  category    Category
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String    @db.ObjectId
  assignedId  String?   @db.ObjectId
  txHash      String?
  createdBy   User      @relation("CreatedTickets", fields: [userId], references: [id])
  assignedTo  User?     @relation("AssignedTickets", fields: [assignedId], references: [id])
  comments    Comment[]
  messages    Message[]
  activityLogs ActivityLog[]

  @@index([userId])
  @@index([assignedId])
  @@index([status])
  @@index([priority])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  ticketId  String   @db.ObjectId
}

model Message {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  createdAt   DateTime @default(now())
  senderId    String?  @db.ObjectId  // Nullable for system messages
  recipientId String?  @db.ObjectId  // Nullable if it's a general update
  ticketId    String   @db.ObjectId
  type        MessageType @default(USER_MESSAGE)
  sender      User?    @relation("SentMessages", fields: [senderId], references: [id])
  recipient   User?    @relation("ReceivedMessages", fields: [recipientId], references: [id])
  ticket      Ticket   @relation(fields: [ticketId], references: [id])

  @@index([senderId])
  @@index([recipientId])
  @@index([ticketId])
}

model KnowledgeCategory {
  id          String    @id @default(cuid()) @map("_id")
  name        String
  description String?
  articles    KnowledgeArticle[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model KnowledgeArticle {
  id          String    @id @default(cuid()) @map("_id")
  title       String
  slug        String    @unique
  content     String
  excerpt     String
  category    KnowledgeCategory @relation(fields: [categoryId], references: [id])
  categoryId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([categoryId])
}

model ActivityLog {
  id        String   @id @default(cuid()) @map("_id")
  action    String   // e.g., "created_ticket", "updated_status", "added_comment"
  details   Json     // Additional context about the action
  ticketId  String?  // Optional as some activities might not be ticket-specific
  userId    String   // Who performed the action
  createdAt DateTime @default(now())

  ticket    Ticket? @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([ticketId])
  @@index([userId])
  @@index([createdAt])
}
