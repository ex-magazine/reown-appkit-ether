
import NextAuth from "next-auth";
import GoogleProvider from "next-auth/providers/google";
import { prisma } from "./prisma";
import { PrismaAdapter } from "@auth/prisma-adapter";

import type { NextAuthConfig } from "next-auth";
import { Role } from "@prisma/client";

const config: NextAuthConfig = {
  providers: [GoogleProvider],
  session: {
    strategy: "jwt",
    maxAge: 30 * 24 * 60 * 60, // 30 days
    updateAge: 24 * 60 * 60, // 24 hours
  },
  // https://next-auth.js.org/configuration/pages
  pages: {
    signIn: "/auth", // Displays signin buttons
  },
  // https://next-auth.js.org/configuration/callbacks
  callbacks: {
    async signIn({ user, account, profile, email, credentials }) {
      return true;
    },
    async redirect({ url, baseUrl }) {
      // Allows relative callback URLs
      if (url.startsWith("/")) return `${baseUrl}${url}`;
      // Allows callback URLs on the same origin
      else if (new URL(url).origin === baseUrl) return url;
      return baseUrl;
    },

    async session({ session, token, user }) {


      // const userInDb = await prisma.user.findUnique({
      //   where: {
      //     id: token.sub,
      //   },
      //   include: {
      //     student: true,
      //     client: true,
      //   },
      // });

      const roles: Array<Role> = [];
      // if (userInDb && userInDb.student) {
      //   roles.push(Role.STUDENT);
      // }
      // if (userInDb && userInDb.client) {
      //   roles.push(Role.CLIENT);
      // }
      console.log("user", user);
      console.log("session", session);
      return {
        ...session,
        user: {
          email: token.email,
          id: token.sub,
          image: token.picture,
          name: token.name,
          role: Role.USER,
          roles: roles,
        },
      };
    },
    async jwt({ token, user, account, profile, isNewUser, session, trigger }) {

      // TODO: fetch user information from db along with his other profile
      const roles = ["user"];
      // TODO: all other roles of the users to roles variable
      return {
        ...token,
        "https://cisprcoders.com/jwt/claims": {
          "x-crispr-allowed-roles": roles,
          "x-crispr-default-role": "user",
          "x-crispr-user-id": token.sub,
        },
      };
    },
  },
  events: {},
  debug: true,
  adapter: PrismaAdapter(prisma),
};

export const {
  handlers: { GET, POST },
  auth,
} = NextAuth(config);
